{"version":3,"sources":["components/nav.jsx","components/footer.jsx","pages/Home.jsx","pages/About.jsx","pages/Projects.jsx","pages/Contact.jsx","pages/Achievements.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","useState","scrolltop","setscrolltop","onScroll","winScroll","document","documentElement","scrollTop","height","scrollHeight","clientHeight","useEffect","window","addEventListener","removeEventListener","collapseOnSelect","expand","variant","bg","fixed","Brand","href","Toggle","aria-controls","Collapse","id","className","to","smooth","duration","Link","style","width","Footer","Home","strings","typeSpeed","backSpeed","loop","params","particles","number","value","size","interactivity","events","onhover","enable","mode","About","Projects","Contact","Achievements","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oYAKe,SAASA,IAAO,IAAD,EACMC,mBAAS,GADf,mBACrBC,EADqB,KACVC,EADU,KAGtBC,EAAW,WACf,IAAMC,EAAYC,SAASC,gBAAgBC,UACrCC,EACJH,SAASC,gBAAgBG,aACzBJ,SAASC,gBAAgBI,aAE3BR,EADkBE,EAAYI,EAAU,MAQ1C,OAJAG,qBAAU,WAER,OADAC,OAAOC,iBAAiB,SAAUV,GAC3B,kBAAMS,OAAOE,oBAAoB,SAAUX,MACjD,IAED,6BACE,kBAAC,IAAD,CACEY,kBAAgB,EAChBC,OAAO,KACPC,QAAQ,OACRC,GAAG,OACHC,MAAM,OAEN,kBAAC,IAAsBC,MAAvB,CAA6BC,KAAK,IAAlC,uBAIA,kBAAC,IAAsBC,OAAvB,CAA8BC,gBAAc,0BAC5C,kBAAC,IAAsBC,SAAvB,CAAgCC,GAAG,yBACjC,kBAAC,IAAD,CAAoBC,UAAU,YAC9B,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAaC,GAAG,QAAQC,QAAQ,EAAMC,SAAU,KAC9C,kBAAC,IAAmBC,KAApB,kBAEF,kBAAC,OAAD,CAAaH,GAAG,UAAUC,QAAQ,EAAMC,SAAU,MAChD,kBAAC,IAAmBC,KAApB,kBAEF,kBAAC,OAAD,CAAaH,GAAG,eAAeC,QAAQ,EAAMC,SAAU,MACrD,kBAAC,IAAmBC,KAApB,sBAEF,kBAAC,OAAD,CAAaH,GAAG,UAAUC,QAAQ,EAAMC,SAAU,MAChD,kBAAC,IAAmBC,KAApB,uBAKR,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,cAAcK,MAAO,CAAEC,MAAM,GAAD,OAAK/B,EAAL,U,OCpDpC,SAASgC,IACtB,OAAO,uC,6CCqDMC,MA/Cf,WACE,OACE,yBAAKR,UAAU,iBACb,yBAAKA,UAAU,YACb,gCACE,uBAAGA,UAAU,SACX,kBAAC,IAAD,CAAOS,QAAS,CAAC,mBAAoBC,UAAW,OAGpD,uBAAGV,UAAU,YACX,kBAAC,IAAD,CACES,QAAS,CACP,kBACA,gBACA,4BAEFC,UAAW,GACXC,UAAW,GACXC,MAAI,MAIV,kBAAC,IAAD,CACEb,GAAG,SACHc,OAAQ,CACNC,UAAW,CACTC,OAAQ,CACNC,MAAO,IAETC,KAAM,CACJD,MAAO,IAGXE,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPC,QAAQ,EACRC,KAAM,kB,OCnCPC,MARf,WACE,OACE,yBAAKxB,GAAG,SACN,uC,OCHS,SAASyB,IACtB,OACE,yBAAKzB,GAAG,WACN,wC,OCFS,SAAS0B,IACtB,OACE,yBAAK1B,GAAG,WACN,wC,OCLS,SAAS2B,IACtB,OACE,yBAAK3B,GAAG,gBACN,6C,OCuBS4B,MAhBf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAACwB,EAAD,MACA,kBAACE,EAAD,MACA,kBAACD,EAAD,MACA,kBAAClB,EAAD,QCXcqB,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASwD,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9d660f11.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n//import { Link } from \"react-router-dom\";\nimport * as ReactBootstrap from \"react-bootstrap\";\nimport * as Scroll from \"react-scroll\";\nimport \"./nav.style.css\";\nexport default function Nav() {\n  const [scrolltop, setscrolltop] = useState(0);\n\n  const onScroll = () => {\n    const winScroll = document.documentElement.scrollTop;\n    const height =\n      document.documentElement.scrollHeight -\n      document.documentElement.clientHeight;\n    const scrolled = (winScroll / height) * 100;\n    setscrolltop(scrolled);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", onScroll);\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, []);\n  return (\n    <div>\n      <ReactBootstrap.Navbar\n        collapseOnSelect\n        expand=\"lg\"\n        variant=\"dark\"\n        bg=\"dark\"\n        fixed=\"top\"\n      >\n        <ReactBootstrap.Navbar.Brand href=\"\">\n          I'm Parag Dangariya\n        </ReactBootstrap.Navbar.Brand>\n\n        <ReactBootstrap.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <ReactBootstrap.Navbar.Collapse id=\"responsive-navbar-nav\">\n          <ReactBootstrap.Nav className=\"mr-auto\"></ReactBootstrap.Nav>\n          <ReactBootstrap.Nav>\n            <Scroll.Link to=\"about\" smooth={true} duration={1000}>\n              <ReactBootstrap.Nav.Link>About Me</ReactBootstrap.Nav.Link>\n            </Scroll.Link>\n            <Scroll.Link to=\"project\" smooth={true} duration={1200}>\n              <ReactBootstrap.Nav.Link>Projects</ReactBootstrap.Nav.Link>\n            </Scroll.Link>\n            <Scroll.Link to=\"achievements\" smooth={true} duration={1400}>\n              <ReactBootstrap.Nav.Link>Achievements</ReactBootstrap.Nav.Link>\n            </Scroll.Link>\n            <Scroll.Link to=\"contact\" smooth={true} duration={1600}>\n              <ReactBootstrap.Nav.Link>Contact Me</ReactBootstrap.Nav.Link>\n            </Scroll.Link>\n          </ReactBootstrap.Nav>\n        </ReactBootstrap.Navbar.Collapse>\n      </ReactBootstrap.Navbar>\n      <div className=\"pageprogress\">\n        <div className=\"progressbar\" style={{ width: `${scrolltop}%` }}></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./footer.style.css\";\nexport default function Footer() {\n  return <div>footer</div>;\n}\n","import React from \"react\";\n//import { Link } from \"react-router-dom\";\n//import image from \"../img/flash-bg.jpg\";\nimport Particles from \"react-particles-js\";\n//import {Transition} from 'react-spring/renderprops'\n//import * as ReactBootstrap from \"react-bootstrap\";\nimport Typed from \"react-typed\";\n\nimport \"./home.style.css\";\nfunction Home() {\n  return (\n    <div className=\"homeContainer\">\n      <div className=\"head-div\">\n        <strong>\n          <p className=\"Hello\">\n            <Typed strings={[\"Parag Dangariya\"]} typeSpeed={50} />\n          </p>\n        </strong>\n        <p className=\"normal-p\">\n          <Typed\n            strings={[\n              \"React Developer\",\n              \"Web Developer\",\n              \"Java / Android Developer\",\n            ]}\n            typeSpeed={80}\n            backSpeed={50}\n            loop\n          />\n        </p>\n      </div>\n      <Particles\n        id=\"simple\"\n        params={{\n          particles: {\n            number: {\n              value: 50,\n            },\n            size: {\n              value: 3,\n            },\n          },\n          interactivity: {\n            events: {\n              onhover: {\n                enable: true,\n                mode: \"repulse\",\n              },\n            },\n          },\n        }}\n      ></Particles>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./about.style.css\";\n//import { Link } from \"react-router-dom\";\nfunction About() {\n  return (\n    <div id=\"about\">\n      <h1>About</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React from \"react\";\nimport \"./projects.style.css\";\n//import { Link } from \"react-router-dom\";\nexport default function Projects() {\n  return (\n    <div id=\"project\">\n      <h1>Project</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./contact.style.css\";\n//import { Link } from \"react-router-dom\";\n\nexport default function Contact() {\n  return (\n    <div id=\"contact\">\n      <h1>Contact</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./achievements.style.css\";\nexport default function Achievements() {\n  return (\n    <div id=\"achievements\">\n      <h1>achievements</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Nav from \"./components/nav\";\nimport Footer from \"./components/footer\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Projects from \"./pages/Projects\";\nimport Contact from \"./pages/Contact\";\nimport Achievements from \"./pages/Achievements\";\n//import { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n\n      <Home />\n\n      <About />\n      <Projects />\n      <Achievements />\n      <Contact />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}